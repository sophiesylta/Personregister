using Personregister.Application.Contracts;
using Personregister.Application.Contracts.Repository;
using Personregister.Domene;
using Moq;
using Personregister.DTO;

namespace Personregister.Application.Test.FødselServiceTester
{
    public class AddFødselTest
    {
        FødselService fødselService;
        Mock<IFødselRepository> fødselRepository;
        Mock<IPersonService> personService;

        public AddFødselTest()
        {
            fødselRepository = new Mock<IFødselRepository>();
            personService = new Mock<IPersonService>();
            //trenger ikke mocke navnService , da den ikke har avhenigheter...
            INavnService navnService = new NavnService();


            fødselService = new FødselService(fødselRepository.Object, personService.Object);
        }

        [Fact]
        [Trait("FødselService", "FødselService")]
        public void TestFødselService()
        {
            DTOFødsel fødselDTO = LagTestFødsel();
            personService.Setup(e => e.findOrCreate(fødselDTO.personnummerFar)).Returns(() => new Person(fødselDTO.personnummerFar) { Etternavn = "Etternavn" });
            personService.Setup(e => e.findOrCreate(fødselDTO.personnummerMor)).Returns(() => new Person(fødselDTO.personnummerMor) { Etternavn = "Etternavn" });

            var fødsel = fødselService.add(fødselDTO);



            //ingen person er registrert fra før ...skal da legge til mor,far og barn i person ,  og en fødsel 
            personService.Verify(e => e.findOrCreate(It.IsAny<long>()), Times.Exactly(2));
            personService.Verify(e => e.add(It.IsAny<Person>()), Times.Once);

            fødselRepository.Verify(e => e.add(It.IsAny<Fødsel>()), Times.Once);

            Assert.NotNull(fødselDTO);
        }

        [Fact]
        [Trait("FødselService", "FødselService")]
        public void TestMorSkalOpprettesHvisIkkeFinnesFraFør()
        {
            DTOFødsel fødselDTO = LagTestFødsel();
            personService.Setup(e => e.findOrCreate(fødselDTO.personnummerFar)).Returns(() => new Person(fødselDTO.personnummerFar));
            personService.Setup(e => e.findOrCreate(fødselDTO.personnummerMor)).Returns(() => new Person(fødselDTO.personnummerMor));


            var fødsel = fødselService.add(fødselDTO);

            //test mors navn skal være utfylt...
            //Assert.False(string.IsNullOrEmpty(fødsel.mor.Fornavn));
            //Assert.False(string.IsNullOrEmpty(fødsel.mor.Etternavn));

            Assert.NotNull(fødsel);
        }

        [Fact]
        [Trait("FødselService", "FødselService")]
        public void TestFarFinnesFraFør()
        {
            //Far finnes fra før
            const string farsFornavn = "Far";
            const string farsEtternavn = "FarsEtternavn";
            const long farsPersonnummer = 32345678901;


            DTOFødsel fødselDTO = LagTestFødsel();

            personService.Setup(e => e.findOrCreate(fødselDTO.personnummerFar)).Returns(() => new Person(fødselDTO.personnummerFar) { Fornavn = farsFornavn, Etternavn = farsEtternavn });
            personService.Setup(e => e.findOrCreate(fødselDTO.personnummerMor)).Returns(() => new Person(fødselDTO.personnummerMor));



            fødselDTO.personnummerFar = farsPersonnummer;

            var fødsel = fødselService.add(fødselDTO);

            //test fars navn skal være utfylt...
            //Assert.Equal(farsFornavn, fødsel.far.Fornavn);
            //Assert.Equal(farsEtternavn, fødsel.far.Etternavn);


            personService.Verify(e => e.findOrCreate(It.IsAny<long>()), Times.Exactly(2));
            fødselRepository.Verify(e => e.add(It.IsAny<Fødsel>()), Times.Once);
        }


        //[Fact]
        //[Trait("FødselService", "FødselService")]
        //public void TestBarnFinnesFra()
        //{
        //    //Barns finnes fra før
        //    const string barnsFornavn = "barnsFornavn";
        //    const string barnsEtternavn = "barnsEtternavn";
        //    const long barnsPersonnummer = 12345678901;

        //    DTOFødsel fødselDTO = LagTestFødsel();

        //    personService.Setup(e => e.getPerson(12345678901)).Returns(() => new Person(12345678901) { Fornavn = barnsFornavn, Etternavn = barnsEtternavn });
        //    personService.Setup(e => e.findOrCreate(fødselDTO.personnummerFar)).Returns(() => new Person(fødselDTO.personnummerFar));
        //    personService.Setup(e => e.findOrCreate(fødselDTO.personnummerMor)).Returns(() => new Person(fødselDTO.personnummerMor));



        //    fødselDTO.barn.Fodselsdato = barnsPersonnummer.ToString();

        //    //test barn navn skal være utfylt...
        //    //Assert.Equal(barnsFornavn, fødsel.barn.Fornavn);
        //    //Assert.Equal(barnsEtternavn, fødsel.barn.Etternavn);
        //    Assert.Throws<Exception>(() => fødselService.add(fødselDTO));

        //    personService.Verify(e => e.findOrCreate(It.IsAny<long>()), Times.Exactly(2));
        //    personService.Verify(e => e.getPerson(It.IsAny<long>()), Times.Exactly(1));

        //    fødselRepository.Verify(e => e.add(It.IsAny<Fødsel>()), Times.Never);
        //}

        private DTOFødsel LagTestFødsel()
        {
            DTOFødsel fødselDTO = new DTOFødsel()
            {
                personnummerMor = 22345678901,

                personnummerFar = 32345678901,

                barn = new DTOBarn()
                {
                    Fornavn = "Ole",
                    Etternavn = "",
                    Fodselsdato = "090621"
                },
                fødselTid = DateTime.Now
            };

            return fødselDTO;
        }
    }
}